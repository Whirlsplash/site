(self.webpackChunksite=self.webpackChunksite||[]).push([[9940],{4137:function(e,r,t){"use strict";t.d(r,{Zo:function(){return u},kt:function(){return m}});var o=t(7294);function n(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){n(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,o,n=function(e,r){if(null==e)return{};var t,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],r.indexOf(t)>=0||(n[t]=e[t]);return n}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var c=o.createContext({}),l=function(e){var r=o.useContext(c),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},u=function(e){var r=l(e.components);return o.createElement(c.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return o.createElement(o.Fragment,{},r)}},d=o.forwardRef((function(e,r){var t=e.components,n=e.mdxType,a=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=l(t),m=n,f=d["".concat(c,".").concat(m)]||d[m]||p[m]||a;return t?o.createElement(f,i(i({ref:r},u),{},{components:t})):o.createElement(f,i({ref:r},u))}));function m(e,r){var t=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var a=t.length,i=new Array(a);i[0]=d;var s={};for(var c in r)hasOwnProperty.call(r,c)&&(s[c]=r[c]);s.originalType=e,s.mdxType="string"==typeof e?e:n,i[1]=s;for(var l=2;l<a;l++)i[l]=t[l];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},3536:function(e,r,t){"use strict";t.r(r),t.d(r,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return u},default:function(){return d}});var o=t(2122),n=t(9756),a=(t(7294),t(4137)),i=["components"],s={title:"RoomServer"},c=void 0,l={unversionedId:"worldserver-protocol/roomserver",id:"worldserver-protocol/roomserver",isDocsHomePage:!1,title:"RoomServer",description:"The following information is directly quoted from the GammaDocs.",source:"@site/docs/worldserver-protocol/roomserver.md",sourceDirName:"worldserver-protocol",slug:"/worldserver-protocol/roomserver",permalink:"/docs/worldserver-protocol/roomserver",editUrl:"https://github.com/whirlsplash/site/edit/master/website/docs/worldserver-protocol/roomserver.md",version:"current",frontMatter:{title:"RoomServer"},sidebar:"docs",previous:{title:"Network Constants",permalink:"/docs/worldserver-protocol/network-constants"},next:{title:"UserServer",permalink:"/docs/worldserver-protocol/userserver"}},u=[],p={toc:u};function d(e){var r=e.components,t=(0,n.Z)(e,i);return(0,a.kt)("wrapper",(0,o.Z)({},p,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The following information is directly quoted from the ",(0,a.kt)("a",{parentName:"p",href:"http://dev.worlds.net/private/GammaDocs/Dev_Kit_Intro.html"},"GammaDocs"),"."),(0,a.kt)("p",null,"The RoomServer can operate in stand-alone mode to handle an entire\nworld when no user authentication is required. For larger worlds, or when user authentication and\nregistration are required, multiple RoomServers can be used in conjunction with a UserServer. If\nshared state (shared objects) is desired, the RoomServer must run in conjunction with an Oracle\ndatabase that will store persistent room data. The RoomServer performs the following tasks:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Listens on a given port to connections by clients."),(0,a.kt)("li",{parentName:"ul"},"Establishes and maintains TCP/IP client connections (when used in conjunction with a UserServer,\nUserServer will establish the first TCP/IP connection with a client and then redirect users to the RoomServers)."),(0,a.kt)("li",{parentName:"ul"},"Subscribes clients to any room the RoomServer is servicing"),(0,a.kt)("li",{parentName:"ul"},"Processes client's avatar locations and properties."),(0,a.kt)("li",{parentName:"ul"},"Disseminates and provides client locations and properties information to other clients in the\nvicinity. Performs crowd control calculations that determine how avatars are seen and heard by others."),(0,a.kt)("li",{parentName:"ul"},"Handles and distributes chat text, whispers and broadcast text. Whispers and other messages\ntargeted at users not on that RoomServer are forwarded to the UserServer for routing."),(0,a.kt)("li",{parentName:"ul"},"Acts as a database client for a properties database to query or modify Room properties, if any.\nThis includes accessing properties for any shared state or shared objects found in rooms.")))}d.isMDXComponent=!0}}]);